name: Competitive Library Checker

on:
  workflow_call:
    inputs:
      target:
        required: true
        description: build project
        type: string
      dll-name:
        required: true
        description: DLL name (e.g. ac-library-csharp.dll )
        type: string
      dotnet-version:
        required: true
        type: string
      timeout-coefficient:
        required: false
        default: 1.0
        type: number
      nuget-path:
        description: path of $NUGET_PACKAGES
        required: false
        default: ""
        type: string

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  NUGET_XMLDOC_MODE: skip
  NUGET_PACKAGES: ${{ inputs.nuget-path }}

jobs:
  library-checker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
      - name: checkout library-checker-problems
        uses: actions/checkout@v2
        with:
          repository: yosupo06/library-checker-problems
          path: .library-checker-problems
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - uses: actions/cache@v2
        name: NuGet cache
        with:
          path: ${{ (inputs.nuget-path != '' && inputs.nuget-path ) || '~/.nuget/packages' }}
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      - uses: actions/cache@v2
        name: pip cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install python dependencies
        working-directory: .library-checker-problems
        run: |
          python -m pip install --upgrade pip
          pip install --user -r requirements.txt
      - name: Build
        run: |
          dotnet build ${{ inputs.target }} -c Release -o ./.competitive-library-checker
      - name: DLL exists?
        shell: bash
        run: |
          [ -e ./.competitive-library-checker/${{ inputs.dll-name }} ]
      - name: Run Library Checker
        shell: pwsh
        run: |
          $libraryCheckerProblemsDir = "./.library-checker-problems"
          function RunLibraryChecker {
              param (
                  [string]$AssemblyPath,
                  [double]$TimeoutCoefficient = 1.0
              )
              try {
                  $assembly = [System.Reflection.Assembly]::LoadFrom($AssemblyPath)
                  Write-Output "::group::DefinedTypes"
                  Write-Output $assembly.DefinedTypes
                  Write-Output "::endgroup::"
              }
              catch {
                  Write-Output "::error::Failed to LoadFrom $AssemblyPath"
                  exit 1
              }

              try {
                  $solvers = [Kzrnm.Competitive.LibraryChecker.CompetitiveSolvers]::GetSolvers($assembly)
              }
              catch {
                  Write-Output "::error::Failed to get solvers"
                  exit 1
              }

              try {
                  Push-Location $libraryCheckerProblemsDir
                  Write-Output "::group::python generate.py"
                  $names = ($solvers | ForEach-Object Name)
                  Write-Output "Run: python generate.py -p $names"
                  python generate.py -p $names
                  Write-Output "::endgroup::"
              }
              catch {
                  Write-Output "::error::Failed to generate"
                  exit 1
              }
              finally {
                  Pop-Location
              }

              $failedSolvers = [System.Collections.Generic.List[string]]::new()
              foreach ($solver in $solvers) {
                  Write-Output "::group::Run $($solver.Name)"
                  try {
                      RunCheckers -solver $solver -TimeoutCoefficient $TimeoutCoefficient
                  }
                  catch {
                      $message = $_.Exception.Message
                      $failedSolvers.Add($solver.Name)
                      Write-Output "::error::$message"
                  }
                  Write-Output "::endgroup::"
              }

              if ($failedSolvers.Count -gt 0) {
                  Write-Output "::error::Failed solvers: $($failedSolvers -join ', ')"
                  exit 1
              }
          }

          function RunCheckers {
              param (
                  [Kzrnm.Competitive.LibraryChecker.ICompetitiveSolver]$solver,
                  [double]$TimeoutCoefficient = 1.0
              )
              $targetDir = [System.IO.DirectoryInfo](Get-ChildItem "$libraryCheckerProblemsDir" -Recurse -Include $solver.Name)
              Write-Output "targetDir: $targetDir TimeoutCoefficient: $TimeoutCoefficient"
              if (-not $targetDir) {
                  throw "Failed to get solver $($solver.Name)"
              }
              mkdir "$targetDir/got"
              foreach ($inputFile in (Get-ChildItem "$targetDir/in/*.in")) {
                  $fileName = $inputFile.BaseName
                  $inStream = [System.IO.FileStream]::new($inputFile.FullName, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read)
                  $outStream = [System.IO.FileStream]::new("$targetDir/got/$fileName.got", [System.IO.FileMode]::Create, [System.IO.FileAccess]::ReadWrite)
                  try {
                      Write-Output "Run: $($solver.Name) $fileName"
                      [Kzrnm.Competitive.LibraryChecker.CompetitiveSolvers]::RunSolverWithTimeout($solver, $inStream, $outStream, $TimeoutCoefficient)
                  }
                  catch {
                      throw "timeout $($solver.Name) $fileName"
                  }
                  finally {
                      $inStream.Dispose()
                      $outStream.Dispose()
                  }

                  try {
                      Push-Location $libraryCheckerProblemsDir
                      Write-Output "Check: $($solver.Name) $fileName"
                      . "$targetDir/checker" "$targetDir/in/$fileName.in" "$targetDir/out/$fileName.out" "$targetDir/got/$fileName.got"
                      if ($LASTEXITCODE -ne 0) {
                          throw "Failed to check $($solver.Name) $fileName"
                      }
                  }
                  catch {
                      throw "Failed to check $($solver.Name) $fileName"
                  }
                  finally {
                      Pop-Location
                  }
              }
          }
          bash -c 'ulimit -s unlimited'
          RunLibraryChecker -AssemblyPath './.competitive-library-checker/${{ inputs.dll-name }}' -TimeoutCoefficient ${{ inputs.timeout-coefficient }}
